{
  "name": "node-jasper",
  "version": "0.1.0",
  "description": "JasperReports within Node.js",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/agmoyano/node-jasper.git"
  },
  "keywords": [
    "jasper",
    "JasperReports",
    "pdf"
  ],
  "author": {
    "name": "Agustin Moyano"
  },
  "contributors": [
    {
      "name": "Gonzalo Gaspar Viñas",
      "email": "gonzalo.vinas@gmail.com"
    }
  ],
  "license": "GPL",
  "bugs": {
    "url": "https://github.com/agmoyano/node-jasper/issues"
  },
  "homepage": "https://github.com/agmoyano/node-jasper",
  "dependencies": {
    "async": "^0.9.0",
    "extend": "^1.3.0",
    "java": "^0.4.2",
    "temp": "^0.8.1"
  },
  "readme": "# node-jasper\n\nJasperReports within Node.js\n\n## Install\n\nInstall via npm:\n\n```\nnpm install --save node-jasper\n```\n\nTo use it inside your project just do:\n\n```\nvar jasper = require('node-jasper')(options);\n```\n\nWhere _options_ is an object with the following signature:\n\n```\noptions: {\n\tpath: , //Path to jasperreports-x.x.x directory (from jasperreports-x.x.x-project.tar.gz)\n\treports: {\n \t\t// Report Definition\n \t\t\"name\": { \n \t\t\tjasper: , //Path to jasper file,\n \t\t\tjrxml: , //Path to jrxml file,\n \t\t\tconn: , //Connection name, definition object or false (if false defaultConn won't apply or if ´in_memory_json´ then you can pass an JSON object in the ´dataset´ property for in-memory data sourcing instead of database access\n \t\t\t\n \t\t}\n \t},\n \tdrivers: {\n \t\t// Driver Definition\n \t\t\"name\": {\n \t\t\tpath: , //Path to jdbc driver jar\n \t\t\tclass: , //Class name of the driver (what you would tipically place in \"Class.forName()\" in java)\n \t\t\ttype: //Type of database (mysql, postgres)\n \t\t}\n \t},\n \tconns: {\n \t\t// Connection Definition\n \t\t\"name\": {\n \t\t\thost: , //Database hostname or IP\n \t\t\tport: , //Database Port\n \t\t\tdbname: , //Database Name\n \t\t\tuser: , //User Name\n \t\t\tpass: , //User Password\n \t\t\tjdbc: , //jdbc connection String. If this is defined, every thing else but user and pass becomes optional. \n \t\t\tdriver: //name or definition of the driver for this conn\t\t\t\n \t\t}\n \t},\n \tdefaultConn: ,//Default Connection name\t\n\tjava: ,//Array of java options, for example [\"-Djava.awt.headless=true\"]\n\tjavaInstnace: //Instance of node-java, if this is null, a new instance will be created and passed in 'java' property\n }\n ```\n\n## API\n\n* **add(name, report)**\n  \n  Add a new _report_ definition identified by _name_.\n\n  In report definition one of _jasper_ or _jrxml_ must be present.\n\n* **pdf(report)**\n  \n  Alias for _export(report, 'pdf')_\n\n* **export(report, format)**\n  \n  Returns the compiled _report_ in the specified _format_.\n\n  report can be of any of the following types:\n \n  * A string that represents report's name. No data is supplied.. _defaultConn_ will be applied to get data with reports internal query.\n\n  * An object that represents report's definition. No data is supplied.. if _conn_ is not present, then _defaultConn_ will be applied to get data with reports internal query.\n\n  * An object that represents reports, data and properties to override for this specific method call.\n\n    ```\n    {\n      report: , //name, definition or an array with any combination of both\n      data: {}, //Data to be applied to the report. If there is an array of reports, data will be applied to each.\n      override: {} //properties of report to override for this specific method call.\n      dataset: {} //an object to be JSON serialized and passed to the Report as fields instead of parameters (see the example for more info)\n \t}\n \t```\n  * An array with any combination of the three posibilities described before. \n\n  * A function returning any combination of the four posibilities described before.\n\n## Example\n\n```\nvar express = require('express'),\n\tapp = express(),\n\tjasper = require('node-jasper')({\n\t\tpath: 'lib/jasperreports-5.6.0',\n\t\treports: {\n\t\t\thw: {\n\t\t\t\tjasper: 'reports/helloWorld.jasper'\n\t\t\t}\n\t\t},\n\t\tdrivers: {\n\t\t\tpg: {\n\t\t\t\tpath: 'lib/postgresql-9.2-1004.jdbc41.jar',\n\t\t\t\tclass: 'org.posgresql.Driver',\n\t\t\t\ttype: 'postgresql'\n\t\t\t}\n\t\t},\n\t\tconns: {\n\t\t\tdbserver1: {\n\t\t\t\thost: 'dbserver1.example.com',\n\t\t\t\tport: 5432,\n\t\t\t\tdbname: 'example',\n\t\t\t\tuser: 'johnny',\n\t\t\t\tpass: 'test',\n\t\t\t\tdriver: 'pg'\n\t\t\t}\n\t\t}\n\t\tdefaultConn: 'dbserver1'\n\t});\n\n\tapp.get('/pdf', function(req, res, next) {\n\t\t//beware of the datatype of your parameter.\n\t\tvar report = {report: 'hw', data: {id: parseInt(req.query.id, 10)}};\n\t\tvar pdf = jasper.pdf(report);\n\t\tres.set({\n\t\t\t'Content-type': 'application/pdf',\n\t\t\t'Content-Length': pdf.length\n\t\t});\n\t\tres.send(pdf);\n\t});\n\n\tapp.listen(3000);\n```\n\nThat's It!.\n",
  "readmeFilename": "README.md",
  "_id": "node-jasper@0.1.0",
  "_from": "node-jasper@~0.1.0"
}
